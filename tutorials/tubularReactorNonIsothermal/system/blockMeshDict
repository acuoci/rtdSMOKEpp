/*---------------------------------------------------------------------------*\               
| =========                 |                                                 |                
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |                
|  \\    /   O peration     | Version:  1.0                                   |                
|   \\  /    A nd           | Web:      http://www.openfoam.org               |                
|    \\/     M anipulation  |                                                 |                
\*---------------------------------------------------------------------------*/                
                                        
FoamFile                                
{                                       
    version         2.0;                
    format          ascii;              
                                        
    root            "";               
    case            "";               
    instance        "";               
    local           "";               
                                        
    class           dictionary;         
    object          blockMeshDict;      
}          
	
convertToMeters 0.001;

pi 3.14159255358979;

Radius   3.5;
X0       0;
X1      50;
X2     100;
X3    1300;

Ym    #calc  "-$Radius * sin(2.5/360*$pi)";
Yp    #calc  " $Radius * sin(2.5/360*$pi)";
Z     #calc  " $Radius * cos(2.5/360*$pi)";

                
vertices                                
(                                       
   ($X0 	0.  		0.  )   // 0
   ($X0 	$Ym      	$Z  )   // 1
   ($X0 	$Yp      	$Z  )   // 2

   ($X1 	0.  		0.  )   // 3
   ($X1 	$Ym      	$Z  )   // 4
   ($X1 	$Yp      	$Z  )   // 5

   ($X2 	0.  		0.  )   // 6
   ($X2 	$Ym      	$Z  )   // 7
   ($X2 	$Yp      	$Z  )   // 8

   ($X3 	0.  		0.  )   // 9
   ($X3 	$Ym      	$Z  )   // 10
   ($X3 	$Yp      	$Z  )   // 11

);

NX01  240;	//240
NX12  180;	//180
NX23  500;	//500

gradx01 1;
gradx12 1;
gradx23 1;

NR     30;	// it was 30

gradr     1;
gradrinv  1;

region1    0.3;
region2    0.4;
region3    0.3;

cellsr1    0.3;
cellsr2    0.4;
cellsr3    0.3;

//gradr     2.00;
//gradrinv  0.50;

//region1    0.2;
//region2    0.6;
//region3    0.2;

//cellsr1    0.3;
//cellsr2    0.4;
//cellsr3    0.3;


blocks
( 	
    hex (0 3 3 0 1 4 5 2)           ( $NX01  1 $NR )  simpleGrading
    (
        $gradx01                // x-direction expansion ratio
        1                       // z-direction expansion ratio
	(
            ($region1 $cellsr1 $gradr)         
            ($region2 $cellsr2 1)              
            ($region3 $cellsr3 $gradrinv)      
        )
    )

    hex (3 6 6 3 4 7 8 5)           ( $NX12  1 $NR )  simpleGrading
    (
        $gradx12                // x-direction expansion ratio
        1                       // z-direction expansion ratio
	(
            ($region1 $cellsr1 $gradr)         
            ($region2 $cellsr2 1)              
            ($region3 $cellsr3 $gradrinv)      
        )
    )

    hex (6 9 9 6 7 10 11 8)           ( $NX23  1 $NR )  simpleGrading
    (
        $gradx23                // x-direction expansion ratio
        1                       // z-direction expansion ratio
	(
            ($region1 $cellsr1 $gradr)         
            ($region2 $cellsr2 1)              
            ($region3 $cellsr3 $gradrinv)      
        )
    )

);
                                     
edges                                
(      
	arc 2   1   ( $X0 0 $Radius )
	arc 5   4   ( $X1 0 $Radius )     
	arc 8   7   ( $X2 0 $Radius )
	arc 11 10   ( $X3 0 $Radius )                 
);    

boundary               
(
        inlet           
        {
            type patch;    
            faces
            (
                (1 2 0 0)
            );
        }           
	
	wall01          
        {
            type wall;    
            faces
            (
                (2 1 4 5)
		(5 4 7 8)
		(8 7 10 11)
            );
        }  

	axis          
        {
            type empty;    
            faces
            (
               	(0 3 3 0)
		(3 6 6 3)
		(6 9 9 6)
            );
        } 

	outlet          
        {
            type patch;    
            faces
            (
		(11 10 9 9)
            );
        } 

	front          
        {
            type wedge;    
            faces
            (
                (4 1 0 3) 
		(7 4 3 6)
		(10 7 6 9)                                   
            );
        } 

	back       
        {
            type wedge;    
            faces
            (
                (2 5 3 0)
		(5 8 6 3)
		(8 11 9 6)
            );
        }                                    
);                                   
                                     
mergePatchPairs                      
(                                    
);                                   
                                    

